enum ProgramType {
  affiliate
  referral
}

enum CommissionType {
  percentage
  flat
}

enum ProgramEnrollmentStatus {
  approved
  pending
  rejected
}

enum CommissionInterval {
  month
  year
}

enum ProgramResourceType {
  logo
  files
}

model Program {
  id                  String              @id @default(cuid())
  workspaceId         String
  name                String
  slug                String              @unique
  logo                String?
  wordmark            String?
  brandColor          String?
  domain              String?
  url                 String?
  type                ProgramType         @default(affiliate)
  cookieLength        Int                 @default(90)

  // Commission details
  commissionAmount    Int                 @default(0)
  commissionType      CommissionType      @default(percentage)
  commissionDuration  Int?
  commissionInterval  CommissionInterval?

  // Discounts (for dual-sided incentives)
  discounts Discount[]

  landerData Json? @db.Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace     Project              @relation(fields: [workspaceId], references: [id])
  primaryDomain Domain?              @relation(fields: [domain], references: [slug], onUpdate: Cascade)
  partners      ProgramEnrollment[]
  payouts       Payout[]
  sales         Sale[]
  invoices      Invoice[]
  resources     ProgramResource[]
  applications  ProgramApplication[]
  invites       ProgramInvite[]
  links         Link[]

  @@index([workspaceId])
  @@index([domain])
}

model ProgramEnrollment {
  id               String                  @id @default(cuid())
  partnerId        String
  programId        String
  linkId           String?                 @unique
  commissionAmount Int?    // custom commission amount for this partner
  discountId       String? // custom discount for this partner
  applicationId    String?                 @unique
  status           ProgramEnrollmentStatus @default(pending)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  partner     Partner             @relation(fields: [partnerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  program     Program             @relation(fields: [programId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  link        Link?               @relation(fields: [linkId], references: [id])
  discount    Discount?           @relation(fields: [discountId], references: [id])
  application ProgramApplication? @relation(fields: [applicationId], references: [id])
  
  @@unique([partnerId, programId])
  @@index([programId])
  @@index([discountId])
}

model ProgramApplication {
  id        String   @id @default(cuid())
  programId String
  partnerId String?
  name      String
  email     String
  proposal  String?  @db.LongText
  website   String?  @db.Text
  comments  String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partner    Partner?           @relation(fields: [partnerId], references: [id])
  program    Program            @relation(fields: [programId], references: [id])
  enrollment ProgramEnrollment?

  @@index([programId])
  @@index([partnerId])
}

// TODO: Haven't finalized the resource table yet.
model ProgramResource {
  id        String              @id @default(cuid())
  programId String
  type      ProgramResourceType
  name      String
  url       String
  size      Int?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  program Program @relation(fields: [programId], references: [id])

  @@index([programId])
}

model ProgramInvite {
  id        String   @id @default(cuid())
  programId String
  email     String
  linkId    String   @unique
  createdAt DateTime @default(now())

  program Program @relation(fields: [programId], references: [id])
  link    Link?   @relation(fields: [linkId], references: [id])

  @@unique([email, programId])
  @@index([programId])
}