enum ProgramEnrollmentStatus {
  pending // pending applications that need approval
  approved // partner who has been approved/actively enrolled
  rejected // program rejected the partner
  invited // partner who has been invited
  declined // partner declined the invite
  deactivated // partner is deactivated by the program
  banned // partner is banned from the program
  archived // partner is archived by the program
}

enum PartnerBannedReason {
  tos_violation
  inappropriate_content
  fake_traffic
  fraud
  spam
  brand_abuse
}

enum PartnerUrlValidationMode {
  domain // domain match (e.g. if URL is example.com/path, example.com and example.com/another-path are allowed)
  exact // exact match (e.g. if URL is example.com/path, only example.com/path is allowed)
}

model Program {
  id                           String    @id @default(cuid())
  workspaceId                  String
  defaultFolderId              String
  defaultGroupId               String
  name                         String
  slug                         String    @unique
  logo                         String?
  wordmark                     String?
  brandColor                   String?
  domain                       String?
  url                          String?
  holdingPeriodDays            Int       @default(0) // number of days to wait before earnings are added to a payout
  minPayoutAmount              Int       @default(0) // Default minimum payout amount of $0
  embedData                    Json?     @db.Json
  resources                    Json?     @db.Json
  termsUrl                     String?   @db.Text
  helpUrl                      String?   @db.Text
  supportEmail                 String?
  autoApprovePartnersEnabledAt DateTime?
  messagingEnabledAt           DateTime?
  partnerNetworkEnabledAt      DateTime?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  startedAt                    DateTime?

  workspace                Project                   @relation(fields: [workspaceId], references: [id])
  partners                 ProgramEnrollment[]
  payouts                  Payout[]
  invoices                 Invoice[]
  applications             ProgramApplication[]
  links                    Link[]
  commissions              Commission[]
  rewards                  Reward[]
  discounts                Discount[]                @relation("ProgramDiscounts")
  groups                   PartnerGroup[]
  partnerGroupDefaultLinks PartnerGroupDefaultLink[]
  bounties                 Bounty[]
  bountySubmissions        BountySubmission[]
  workflows                Workflow[]
  messages                 Message[]
  comments                 PartnerComment[]
  discountCodes            DiscountCode[]
  campaigns                Campaign[]
  discoveredPartners       DiscoveredPartner[]
  industryInterests        ProgramIndustryInterest[]

  @@index(workspaceId)
  @@index(domain)
}

model ProgramEnrollment {
  id            String                  @id @default(cuid())
  partnerId     String
  programId     String
  tenantId      String?
  groupId       String?
  applicationId String?                 @unique
  clickRewardId String?
  leadRewardId  String?
  saleRewardId  String?
  discountId    String?
  status        ProgramEnrollmentStatus @default(pending)

  // partner stats
  totalClicks      Int @default(0) // total clicks
  totalLeads       Int @default(0) // total leads
  totalConversions Int @default(0) // total conversions
  totalSales       Int @default(0) // total sales
  totalSaleAmount  Int @default(0) // total sale amount (in cents)
  totalCommissions Int @default(0) // total commissions earned by the partner (in cents)

  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  customerDataSharingEnabledAt DateTime?
  bannedAt                     DateTime?
  bannedReason                 PartnerBannedReason?

  partner           Partner             @relation(fields: [partnerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  program           Program             @relation(fields: [programId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  links             Link[]
  partnerGroup      PartnerGroup?       @relation(fields: [groupId], references: [id])
  application       ProgramApplication? @relation(fields: [applicationId], references: [id])
  clickReward       Reward?             @relation("ClickRewardEnrollments", fields: [clickRewardId], references: [id])
  leadReward        Reward?             @relation("LeadRewardEnrollments", fields: [leadRewardId], references: [id])
  saleReward        Reward?             @relation("SaleRewardEnrollments", fields: [saleRewardId], references: [id])
  discount          Discount?           @relation(fields: [discountId], references: [id])
  bountySubmissions BountySubmission[]
  discountCodes     DiscountCode[]

  @@unique([partnerId, programId])
  @@unique([tenantId, programId])
  @@index(programId)
  @@index(groupId)
  @@index(clickRewardId)
  @@index(leadRewardId)
  @@index(saleRewardId)
  @@index(discountId)
}

model ProgramApplication {
  id        String   @id @default(cuid())
  programId String
  groupId   String?
  name      String
  email     String
  country   String?
  website   String?  @db.Text
  youtube   String?  @db.Text
  twitter   String?  @db.Text
  linkedin  String?  @db.Text
  instagram String?  @db.Text
  tiktok    String?  @db.Text
  formData  Json?    @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  program      Program            @relation(fields: [programId], references: [id])
  partnerGroup PartnerGroup?      @relation(fields: [groupId], references: [id])
  enrollment   ProgramEnrollment?

  @@index(programId)
  @@index(groupId)
  @@index(email)
}

model ProgramIndustryInterest {
  programId        String
  industryInterest IndustryInterest

  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, industryInterest])
}
