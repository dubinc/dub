enum PartnerStatus {
  default
  verified
  featured
}

enum PartnerRole {
  owner
  member
}

enum PartnerProfileType {
  individual
  company
}

model Partner {
  id                           String             @id @default(cuid())
  name                         String
  companyName                  String?
  profileType                  PartnerProfileType @default(individual)
  email                        String?            @unique
  image                        String?
  description                  String?            @db.Text
  country                      String?
  status                       PartnerStatus      @default(default)
  paypalEmail                  String?            @unique
  stripeConnectId              String?            @unique
  payoutsEnabledAt             DateTime?
  minWithdrawalAmount          Int                @default(10000) // Default minimum withdrawal amount of $100
  connectPayoutsLastRemindedAt DateTime?
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  website                      String?
  websiteTxtRecord             String?
  websiteVerifiedAt            DateTime?
  youtube                      String?
  youtubeChannelId             String?
  youtubeVerifiedAt            DateTime?
  youtubeSubscriberCount       Int                @default(0)
  youtubeVideoCount            Int                @default(0)
  youtubeViewCount             Int                @default(0)
  twitter                      String?
  twitterVerifiedAt            DateTime?
  linkedin                     String?
  linkedinVerifiedAt           DateTime?
  instagram                    String?
  instagramVerifiedAt          DateTime?
  tiktok                       String?
  tiktokVerifiedAt             DateTime?
  invoiceSettings              Json?

  programs    ProgramEnrollment[]
  users       PartnerUser[]
  invites     PartnerInvite[]
  payouts     Payout[]
  commissions Commission[]
}
model PartnerInvite {
  email     String
  expires   DateTime
  partnerId String
  role      PartnerRole @default(member)
  createdAt DateTime    @default(now())

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([email, partnerId])
  @@index([partnerId])
}

model PartnerUser {
  id        String      @id @default(cuid())
  role      PartnerRole @default(member)
  userId    String
  partnerId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  notificationPreferences PartnerNotificationPreferences?

  @@unique([userId, partnerId])
  @@index([partnerId])
}
model PartnerNotificationPreferences {
  id                         String  @id @default(cuid())
  partnerUserId              String  @unique

  commissionCreated              Boolean @default(true)
  applicationApproved        Boolean @default(true)

  partnerUser PartnerUser @relation(fields: [partnerUserId], references: [id], onDelete: Cascade)
}
