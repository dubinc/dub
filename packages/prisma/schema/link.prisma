model Link {
  id              String    @id @default(cuid())
  domain          String // domain of the link (e.g. dub.sh) – also stored on Redis
  key             String // key of the link (e.g. /github) – also stored on Redis
  url             String    @db.LongText // target url (e.g. https://github.com/dubinc/dub) – also stored on Redis
  shortLink       String    @unique @db.VarChar(400) // new column for the full short link
  archived        Boolean   @default(false) // whether the link is archived or not
  expiresAt       DateTime? // when the link expires – stored on Redis via ttl
  expiredUrl      String?   @db.LongText // URL to redirect the user to when the link is expired
  password        String? // password to access the link
  trackConversion Boolean   @default(false) // whether to track conversions or not

  proxy       Boolean @default(false) // Proxy to use custom OG tags (stored on redis) – if false, will use OG tags from target url
  title       String? // OG title for the link (e.g. Dub.co - Open-Source Link Management Infrastructure)
  description String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  image       String? @db.LongText // OG image for the link (e.g. https://d.to/og)
  video       String? @db.LongText // OG video for the link

  // UTM parameters
  utm_source   String? // UTM source for the link (e.g. youtube.com)
  utm_medium   String? // UTM medium for the link (e.g. social)
  utm_campaign String? // UTM campaign for the link (e.g. summer-sale)
  utm_term     String? // UTM term for the link (e.g. dub)
  utm_content  String? // UTM content for the link (e.g. description)

  // Link cloaking/masking via rewrite
  rewrite Boolean @default(false) // whether to rewrite the link or not

  doIndex Boolean @default(false) // we don't index short links by default

  // Custom device targeting
  ios     String? @db.LongText // custom link for iOS devices
  android String? @db.LongText // custom link for Android devices
  geo     Json?   @db.Json // custom link for specific countries

  // User who created the link
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the link belongs to
  project       Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId     String?
  // Relational reference to the project domain
  projectDomain Domain?  @relation(fields: [domain], references: [slug], onUpdate: Cascade, onDelete: Cascade)

  // External & tenant IDs (for API usage + multi-tenancy)
  externalId      String?
  tenantId        String?

  publicStats Boolean   @default(false) // whether to show public stats or not
  clicks      Int       @default(0) // number of clicks
  lastClicked DateTime? // when the link was last clicked
  leads       Int       @default(0)
  sales       Int       @default(0) // number of sales
  saleAmount  Int       @default(0) // total dollar value of sales (in cents)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Link tags
  tags LinkTag[]

  // Link webhooks
  webhooks LinkWebhook[]

  // Comments on the particular shortlink
  comments String? @db.LongText

  dashboard         Dashboard?
  programEnrollment ProgramEnrollment?
  programInvite     ProgramInvite?

  programId String?
  program   Program? @relation(fields: [programId], references: [id])
  customers Customer[]

  @@unique([domain, key])
  @@fulltext([key, url])
  @@index(trackConversion)
  @@index(proxy)
  @@index(password)
  @@index(archived)
  @@index(createdAt(sort: Desc))
  @@index(clicks(sort: Desc))
  @@index(lastClicked)
  @@index(programId)
  @@index(userId)
  @@unique([projectId, externalId])
  @@index(tenantId)
}
