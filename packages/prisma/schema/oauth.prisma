model OAuthApp {
  id                  String  @id @default(cuid())
  integrationId       String  @unique
  clientId            String  @unique
  hashedClientSecret  String
  partialClientSecret String
  redirectUris        Json
  pkce                Boolean @default(false)

  oAuthCodes  OAuthCode[]
  integration Integration? @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model OAuthCode {
  id                  String   @id @default(cuid())
  clientId            String
  userId              String // User who granted access
  projectId           String // Workspace that user granted access to
  code                String   @unique
  scopes              String?
  redirectUri         String
  codeChallenge       String?
  codeChallengeMethod String?
  expiresAt           DateTime
  createdAt           DateTime @default(now())

  oAuthApp OAuthApp @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([projectId])
}

model OAuthRefreshToken {
  id                 String   @id @default(cuid())
  installationId     String
  accessTokenId      String
  hashedRefreshToken String   @unique
  expiresAt          DateTime
  createdAt          DateTime @default(now())

  accessToken          RestrictedToken      @relation(fields: [accessTokenId], references: [id], onDelete: Cascade)
  installedIntegration InstalledIntegration @relation(fields: [installationId], references: [id], onDelete: Cascade)

  @@index([installationId])
  @@index([accessTokenId])
}
